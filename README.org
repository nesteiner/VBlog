#+title: Scaffold 脚手架

* Progress
** Frontend
- [X] 主页
- [X] 删除失败
- [X] 删除和显示不同步
- [X] 草稿箱功能
- [X] 回收站功能 v-if ??
- [X] 删除操作
- [X] 栏目管理
- [X] 请求时 state = ?
- [X] 添加 Category
- [X] 用户管理
- [ ] 用户管理 + 用户 enabled
** Backend
- [X] Article state 添加一个字段 state = DELETED/3, state = DUSTBIN/2

** PROBLEM
- [X] enabledChange(user.enabled) ?
* 介绍
这个项目参考了 江南一点雨 大佬的 *VBlog* 项目，原先后端都抄了一遍，抄明白后，自己用 Kotlin 写了自己的后端
我并没有使用 mybatis 来作为 ORM ，而是使用 JPA 作为与数据库的交互，主要是因为 mybatis 抄的时候发现自己用的是 Kotlin ，里面的构造方法要求
完整，而原来的项目中数据库表的定义与数据库模型的定义有很大的不同，所以我决定自己改写一遍，不用 Java 
前端也是抄的，不过使用了 Vue3 和 Typescript 语法，编辑器插件使用了其他的插件
总结下来，这个项目我觉得非常适合供人学习，我的代码尽量写的简洁，没有冗余代码，欢迎大家 star

* 实例
** 登录页
** 主页
** 添加文章
** 修改文章
** 用户设置
* Nginx 配置
#+begin_src conf
  user steiner;
  worker_processes  1;

  #error_log  logs/error.log;
  #error_log  logs/error.log  notice;
  #error_log  logs/error.log  info;

  #pid        logs/nginx.pid;


  events {
      worker_connections  1024;
  }


  http {
      include       mime.types;
      # default_type  application/octet-stream;
      default_type application/json;

      #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      #                  '$status $body_bytes_sent "$http_referer" '
      #                  '"$http_user_agent" "$http_x_forwarded_for"';

      #access_log  logs/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      #keepalive_timeout  0;
      keepalive_timeout  65;

      #gzip  on;

      server {
          listen       80;
          server_name  localhost;

          #charset koi8-r;

          #access_log  logs/host.access.log  main;

          # location / {
          #     root   /usr/share/nginx/html;
          #     index  index.html index.htm;
          # }

          location / {
              root /home/steiner/workspace/sayhello/frontend/dist;
              index index.html;
              try_files $uri $uri/ /index.html;
          }

          location /api {
              proxy_pass http://localhost:8082/api;
              add_header Access-Control-Allow-Origin * always;
              add_header Access-Control-Allow-Methods * always;
              add_header Access-Control-Allow-Headers * always;

              if ($request_method = 'OPTIONS') {
                 add_header Access-Control-Allow-Origin * always;
                 add_header Access-Control-Allow-Methods * always;
                 add_header Access-Control-Allow-Headers * always;
                 return 204;     
              }
          }

          #error_page  404              /404.html;

          # redirect server error pages to the static page /50x.html
          #
          error_page   500 502 503 504  /50x.html;
          location = /50x.html {
              root   /usr/share/nginx/html;
          }

          # proxy the PHP scripts to Apache listening on 127.0.0.1:80
          #
          #location ~ \.php$ {
          #    proxy_pass   http://127.0.0.1;
          #}

          # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
          #
          #location ~ \.php$ {
          #    root           html;
          #    fastcgi_pass   127.0.0.1:9000;
          #    fastcgi_index  index.php;
          #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
          #    include        fastcgi_params;
          #}

          # deny access to .htaccess files, if Apache's document root
          # concurs with nginx's one
          #
          #location ~ /\.ht {
          #    deny  all;
          #}
      }


      # another virtual host using mix of IP-, name-, and port-based configuration
      #
      #server {
      #    listen       8000;
      #    listen       somename:8080;
      #    server_name  somename  alias  another.alias;

      #    location / {
      #        root   html;
      #        index  index.html index.htm;
      #    }
      #}


      # HTTPS server
      #
      #server {
      #    listen       443 ssl;
      #    server_name  localhost;

      #    ssl_certificate      cert.pem;
      #    ssl_certificate_key  cert.key;

      #    ssl_session_cache    shared:SSL:1m;
      #    ssl_session_timeout  5m;

      #    ssl_ciphers  HIGH:!aNULL:!MD5;
      #    ssl_prefer_server_ciphers  on;

      #    location / {
      #        root   html;
      #        index  index.html index.htm;
      #    }
      #}

  }

#+end_src